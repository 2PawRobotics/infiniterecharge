/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;



import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.util.Color;



/**
 * This is a demo program showing the use of the RobotDrive class, specifically
 * it contains the code necessary to operate a robot with tank drive.
 */
public class Robot extends TimedRobot {
  private DifferentialDrive tank;

  private Joystick rightjoy;
  private Joystick leftjoy;
  private Joystick operator;
  private Timer timer = new Timer();

  private final Spark lift = new Spark(6);
  private final Spark balleater = new Spark(5);
  private final Spark shoot = new Spark(4);
  private final Spark spinnything = new Spark(7);
  private final Spark liftlock = new Spark(8);

  private final I2C.Port i2cPort = I2C.Port.kOnboard;


  public Robot()
  {
    System.out.println("Robot.constructor()");
  }
  @Override
  public void robotInit() {
    System.out.println("Robot.robotInit()");

   final SpeedController left = new SpeedControllerGroup(new Spark(0), new Spark(2));
   final SpeedController right = new SpeedControllerGroup(new Spark(1), new Spark(3));

    tank = new DifferentialDrive(left, right);
    rightjoy = new Joystick(0);
    leftjoy = new Joystick(1);
    operator = new Joystick(2);
    CameraServer.getInstance().startAutomaticCapture();
   
  }

  @Override
  public void teleopPeriodic() { //1 is 100% so .2 is 20%
    tank.tankDrive(leftjoy.getY(), rightjoy.getY());

  if (operator.getRawButton(12)) {
    lift.set(-1);
    } else if (operator.getRawButton(11)) {
        lift.set(1);
    } else {
        lift.set(0);
    }

  if (operator.getRawButton(3)) {
  balleater.set(-0.7);
  } else if (operator.getRawButton(4)) {
  balleater.set(0.4);
  } else {
  balleater.set(0);
  }

  if (operator.getRawButton(2)) { //this is the statment for shooting forward
  shoot.set(-1);
} else if (operator.getRawButton(1)) { //this is a statment for reversing the shooter
  shoot.set(1);
} else {
  shoot.set(0);
}

  if (operator.getRawButton(7)) {
        spinnything.set(1);
      }
      else {
        spinnything.set(0);
  }
  
  if (operator.getRawButton(9)) {
  liftlock.set(-1);
} else if (operator.getRawButton(10)) {
  liftlock.set(1);
} else {
  liftlock.set(0);
}


  }


  @Override
  public void autonomousInit()
   {
    System.out.println("Robot.autonomous()");
    timer.reset();
    timer.start();

    tank.setSafetyEnabled(false);

    
    
   }
  
   @Override
   public void autonomousPeriodic() {
     if (timer.get() <1.0 ){
      tank.tankDrive(0.56, 0.5);
     }
     else {
      tank.tankDrive(0.0, 0.0);
     }
   }

  public void operatorControl ()
  {
    System.out.println("Robot.operatorControl()");

    tank.setSafetyEnabled(true);

    while (isOperatorControl() && isEnabled())
    {
      tank.arcadeDrive(operator.getX(), operator.getY());

      Timer.delay(0.020);
    }
  }

  public void disable()
  {
    System.out.println("Robot.disable()");
  }
  public void test()
  {
    System.out.println("Robot.test");
  }




  


}
